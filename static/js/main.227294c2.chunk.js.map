{"version":3,"sources":["component/weather/weathercard.js","component/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAmIeA,EAjIK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,EAAwCC,IAAMC,SAAS,IAAvD,mBAAOC,EAAP,KAAqBC,EAArB,KAEEC,EAQEL,EARFK,KACAC,EAOEN,EAPFM,SACAC,EAMEP,EANFO,SACAC,EAKER,EALFQ,YACAC,EAIET,EAJFS,KACAC,EAGEV,EAHFU,MACAC,EAEEX,EAFFW,QACAC,EACEZ,EADFY,OAGFC,qBAAU,WACR,GAAIL,EACF,OAAQA,GACN,IAAK,SACHJ,EAAgB,aAChB,MAEF,IAAK,OACHA,EAAgB,WAChB,MAEF,IAAK,OACHA,EAAgB,WAChB,MAEF,IAAK,OACHA,EAAgB,qBAChB,MAEF,IAAK,QACHA,EAAgB,gBAChB,MAEF,IAAK,OACHA,EAAgB,WAChB,MAEF,IAAK,eACHA,EAAgB,gBAChB,MAEF,QACEA,EAAgB,YAIrB,CAACI,IAGJ,IACIM,EAAO,IAAIC,KAAW,IADhBH,GAENI,EAAO,UAAMF,EAAKG,WAAX,YAAyBH,EAAKI,cACzC,OACE,mCACE,0BAASC,UAAU,SAAnB,UACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAS,aAAQhB,KACpB,0BAGF,sBAAKgB,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,iCAAOd,EAAP,YAGF,sBAAKc,UAAU,cAAf,UACE,qBAAKA,UAAU,mBAAf,SAAmCX,IACnC,sBAAKW,UAAU,QAAf,UACGV,EADH,IACUE,WAId,qBAAKQ,UAAU,OAAf,UAAuB,IAAIJ,MAAOK,mBAElC,sBAAKD,UAAU,aAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,mBAEhB,oBAAGA,UAAU,sBAAb,UACGH,EADH,MAEE,uBAFF,eAOF,sBAAKG,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,qBAEhB,oBAAGA,UAAU,sBAAb,UACGb,EADH,IACa,uBADb,oBAOJ,sBAAKa,UAAU,qBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,sBAEhB,oBAAGA,UAAU,sBAAb,UACGZ,EACD,uBAFF,iBAOF,sBAAKY,UAAU,oBAAf,UACE,4BACE,mBAAGA,UAAW,wBAEhB,oBAAGA,UAAU,sBAAb,UACGT,EADH,IACU,uBADV,0BClDCW,G,MAjEF,WACX,MAAsCnB,mBAAS,KAA/C,mBAAOoB,EAAP,KAAoBC,EAApB,KACA,EAAgCrB,mBAAS,IAAzC,mBAAOF,EAAP,KAAiBwB,EAAjB,KAEMC,EAAc,uCAAG,oDAAAC,EAAA,sEAEfC,EAFe,4DAE4CL,EAF5C,iEAIHM,MAAMD,GAJH,cAIfE,EAJe,gBAKFA,EAAIC,OALF,OAKfC,EALe,SAOgBA,EAAKC,KAAlC3B,EAPa,EAObA,KAAMC,EAPO,EAOPA,SAAUC,EAPH,EAOGA,SACRC,EAAgBuB,EAAKE,QAAQ,GAAnCD,KACAvB,EAASsB,EAATtB,KACAC,EAAUqB,EAAKG,KAAfxB,MAVW,EAWSqB,EAAKI,IAAzBxB,EAXW,EAWXA,QAASC,EAXE,EAWFA,OAYjBY,EAVyB,CACvBnB,OACAC,WACAC,WACAC,cACAC,OACAC,QACAC,UACAC,WArBiB,kDAyBnBwB,QAAQC,IAAR,MAzBmB,0DAAH,qDAgCpB,OAHAxB,qBAAU,WACRY,OAGA,qCACE,qBAAKN,UAAU,OAAf,SACE,sBAAKA,UAAU,SAAf,UACE,uBACEmB,KAAK,SACLC,YAAY,YACZC,WAAS,EACTC,GAAG,SACHtB,UAAU,aACVuB,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,EAAeqB,EAAEC,OAAOH,UAE3C,wBACEvB,UAAU,eACVmB,KAAK,SACLQ,QAASrB,EAHX,yBAWJ,cAAC,EAAD,CAAazB,SAAUA,SCrDd+C,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAE1Bb,M","file":"static/js/main.227294c2.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nconst Weathercard = ({ tempInfo }) => {\r\n  const [weatherState, setWeatherState] = React.useState(\"\");\r\n  const {\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset,\r\n  } = tempInfo;\r\n\r\n  useEffect(() => {\r\n    if (weathermood) {\r\n      switch (weathermood) {\r\n        case \"Clouds\":\r\n          setWeatherState(\"wi-cloudy\");\r\n          break;\r\n\r\n        case \"Haze\":\r\n          setWeatherState(\"wi-haze\");\r\n          break;\r\n\r\n        case \"Rain\" || \"Hail\" || \"Showers\":\r\n          setWeatherState(\"wi-rain\");\r\n          break;\r\n\r\n        case \"Snow\":\r\n          setWeatherState(\"wi-snowflake-cold\");\r\n          break;\r\n\r\n        case \"Clear\" || \"Sunny\":\r\n          setWeatherState(\"wi-day-sunny\");\r\n          break;\r\n\r\n        case \"Mist\":\r\n          setWeatherState(\"wi-dust\");\r\n          break;\r\n\r\n        case \"Thunderstorm\" || \"lightning\":\r\n          setWeatherState(\"wi-lightning\");\r\n          break;\r\n\r\n        default:\r\n          setWeatherState(\"wi-na\");\r\n          break;\r\n      }\r\n    }\r\n  }, [weathermood]);\r\n\r\n  //   converting the seconds into Time\r\n  let sec = sunset;\r\n  let date = new Date(sec * 1000);\r\n  let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n  return (\r\n    <>\r\n      <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weatherState}`}></i>\r\n          <br />\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span>{temp}&deg;</span>\r\n          </div>\r\n\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{weathermood}</div>\r\n            <div className=\"place\">\r\n              {name},{country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"date\">{new Date().toLocaleString()}</div>\r\n\r\n        <div className=\"extra-temp\">\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-sunset\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {timeStr} PM\r\n                <br />\r\n                Sunset\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-humidity\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {humidity} <br />\r\n                Humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-barometer\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {pressure}\r\n                <br />\r\n                Pressure\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-strong-wind\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {speed} <br />\r\n                Speed\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weathercard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Weathercard from \"./weathercard\";\r\nimport \"./style.css\";\r\n\r\nconst Temp = () => {\r\n  const [searchValue, setSearchValue] = useState(\" \");\r\n  const [tempInfo, setTempInfo] = useState({});\r\n\r\n  const getWeatherInfo = async () => {\r\n    try {\r\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=3c6c0b0efd3b0464c18218f70ca581f6`;\r\n\r\n      let res = await fetch(url);\r\n      let data = await res.json();\r\n\r\n      let { temp, humidity, pressure } = data.main;\r\n      const { main: weathermood } = data.weather[0];\r\n      const { name } = data;\r\n      const { speed } = data.wind;\r\n      const { country, sunset } = data.sys;\r\n\r\n      const myNewWeatherInfo = {\r\n        temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n      };\r\n      setTempInfo(myNewWeatherInfo);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getWeatherInfo();\r\n  });\r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"Search...\"\r\n            autoFocus\r\n            id=\"search\"\r\n            className=\"searchTerm\"\r\n            value={searchValue}\r\n            onChange={(e) => setSearchValue(e.target.value)}\r\n          />\r\n          <button\r\n            className=\"searchButton\"\r\n            type=\"button\"\r\n            onClick={getWeatherInfo}\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/*Temp Card*/}\r\n      <Weathercard tempInfo={tempInfo} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Temp;\r\n","import React from \"react\";\nimport Temp from \"./component/weather/temp\";\n\nconst App = () => {\n  return (\n    <>\n      <Temp />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}